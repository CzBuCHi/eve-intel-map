//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace eve_intel_map.EveIntel {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="EveIntelCharacterInfo", Namespace="http://schemas.datacontract.org/2004/07/eve_intel_server.Service")]
    [System.SerializableAttribute()]
    public partial class EveIntelCharacterInfo : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<bool> AllianceKosField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string AllianceNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private long CharacterIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool CharacterKosField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CharacterNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool CorporationKosField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CorporationNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NotesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> ShipTypeIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> ShipTypeTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<long> SolarsystemIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> SolarsystemTimeField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<bool> AllianceKos {
            get {
                return this.AllianceKosField;
            }
            set {
                if ((this.AllianceKosField.Equals(value) != true)) {
                    this.AllianceKosField = value;
                    this.RaisePropertyChanged("AllianceKos");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string AllianceName {
            get {
                return this.AllianceNameField;
            }
            set {
                if ((object.ReferenceEquals(this.AllianceNameField, value) != true)) {
                    this.AllianceNameField = value;
                    this.RaisePropertyChanged("AllianceName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long CharacterID {
            get {
                return this.CharacterIDField;
            }
            set {
                if ((this.CharacterIDField.Equals(value) != true)) {
                    this.CharacterIDField = value;
                    this.RaisePropertyChanged("CharacterID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool CharacterKos {
            get {
                return this.CharacterKosField;
            }
            set {
                if ((this.CharacterKosField.Equals(value) != true)) {
                    this.CharacterKosField = value;
                    this.RaisePropertyChanged("CharacterKos");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CharacterName {
            get {
                return this.CharacterNameField;
            }
            set {
                if ((object.ReferenceEquals(this.CharacterNameField, value) != true)) {
                    this.CharacterNameField = value;
                    this.RaisePropertyChanged("CharacterName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool CorporationKos {
            get {
                return this.CorporationKosField;
            }
            set {
                if ((this.CorporationKosField.Equals(value) != true)) {
                    this.CorporationKosField = value;
                    this.RaisePropertyChanged("CorporationKos");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CorporationName {
            get {
                return this.CorporationNameField;
            }
            set {
                if ((object.ReferenceEquals(this.CorporationNameField, value) != true)) {
                    this.CorporationNameField = value;
                    this.RaisePropertyChanged("CorporationName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Notes {
            get {
                return this.NotesField;
            }
            set {
                if ((object.ReferenceEquals(this.NotesField, value) != true)) {
                    this.NotesField = value;
                    this.RaisePropertyChanged("Notes");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> ShipTypeID {
            get {
                return this.ShipTypeIDField;
            }
            set {
                if ((this.ShipTypeIDField.Equals(value) != true)) {
                    this.ShipTypeIDField = value;
                    this.RaisePropertyChanged("ShipTypeID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> ShipTypeTime {
            get {
                return this.ShipTypeTimeField;
            }
            set {
                if ((this.ShipTypeTimeField.Equals(value) != true)) {
                    this.ShipTypeTimeField = value;
                    this.RaisePropertyChanged("ShipTypeTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<long> SolarsystemID {
            get {
                return this.SolarsystemIDField;
            }
            set {
                if ((this.SolarsystemIDField.Equals(value) != true)) {
                    this.SolarsystemIDField = value;
                    this.RaisePropertyChanged("SolarsystemID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> SolarsystemTime {
            get {
                return this.SolarsystemTimeField;
            }
            set {
                if ((this.SolarsystemTimeField.Equals(value) != true)) {
                    this.SolarsystemTimeField = value;
                    this.RaisePropertyChanged("SolarsystemTime");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="EveIntel.IEveIntel", CallbackContract=typeof(eve_intel_map.EveIntel.IEveIntelCallback))]
    public interface IEveIntel {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEveIntel/Connect", ReplyAction="http://tempuri.org/IEveIntel/ConnectResponse")]
        System.Nullable<System.Guid> Connect(long keyId, string vCode, long solarsystemID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEveIntel/Connect", ReplyAction="http://tempuri.org/IEveIntel/ConnectResponse")]
        System.Threading.Tasks.Task<System.Nullable<System.Guid>> ConnectAsync(long keyId, string vCode, long solarsystemID);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IEveIntel/Disconnect")]
        void Disconnect(System.Guid clientId);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IEveIntel/Disconnect")]
        System.Threading.Tasks.Task DisconnectAsync(System.Guid clientId);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IEveIntel/UpdateLocal")]
        void UpdateLocal(System.Guid clientId, long solarsystemID, System.Collections.Generic.List<string> characterNames);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IEveIntel/UpdateLocal")]
        System.Threading.Tasks.Task UpdateLocalAsync(System.Guid clientId, long solarsystemID, System.Collections.Generic.List<string> characterNames);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEveIntel/ClientGlobalUpdate", ReplyAction="http://tempuri.org/IEveIntel/ClientGlobalUpdateResponse")]
        System.Collections.Generic.List<eve_intel_map.EveIntel.EveIntelCharacterInfo> ClientGlobalUpdate(System.Guid clientId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEveIntel/ClientGlobalUpdate", ReplyAction="http://tempuri.org/IEveIntel/ClientGlobalUpdateResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<eve_intel_map.EveIntel.EveIntelCharacterInfo>> ClientGlobalUpdateAsync(System.Guid clientId);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IEveIntelCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IEveIntel/ClientCountUpdate")]
        void ClientCountUpdate(int clientCount);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IEveIntel/SecondConnection")]
        void SecondConnection(long solarsystemID);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IEveIntel/ClientIntelUpdate")]
        void ClientIntelUpdate(System.Collections.Generic.List<eve_intel_map.EveIntel.EveIntelCharacterInfo> characters);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IEveIntelChannel : eve_intel_map.EveIntel.IEveIntel, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class EveIntelClient : System.ServiceModel.DuplexClientBase<eve_intel_map.EveIntel.IEveIntel>, eve_intel_map.EveIntel.IEveIntel {
        
        public EveIntelClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public EveIntelClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public EveIntelClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public EveIntelClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public EveIntelClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public System.Nullable<System.Guid> Connect(long keyId, string vCode, long solarsystemID) {
            return base.Channel.Connect(keyId, vCode, solarsystemID);
        }
        
        public System.Threading.Tasks.Task<System.Nullable<System.Guid>> ConnectAsync(long keyId, string vCode, long solarsystemID) {
            return base.Channel.ConnectAsync(keyId, vCode, solarsystemID);
        }
        
        public void Disconnect(System.Guid clientId) {
            base.Channel.Disconnect(clientId);
        }
        
        public System.Threading.Tasks.Task DisconnectAsync(System.Guid clientId) {
            return base.Channel.DisconnectAsync(clientId);
        }
        
        public void UpdateLocal(System.Guid clientId, long solarsystemID, System.Collections.Generic.List<string> characterNames) {
            base.Channel.UpdateLocal(clientId, solarsystemID, characterNames);
        }
        
        public System.Threading.Tasks.Task UpdateLocalAsync(System.Guid clientId, long solarsystemID, System.Collections.Generic.List<string> characterNames) {
            return base.Channel.UpdateLocalAsync(clientId, solarsystemID, characterNames);
        }
        
        public System.Collections.Generic.List<eve_intel_map.EveIntel.EveIntelCharacterInfo> ClientGlobalUpdate(System.Guid clientId) {
            return base.Channel.ClientGlobalUpdate(clientId);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<eve_intel_map.EveIntel.EveIntelCharacterInfo>> ClientGlobalUpdateAsync(System.Guid clientId) {
            return base.Channel.ClientGlobalUpdateAsync(clientId);
        }
    }
}
