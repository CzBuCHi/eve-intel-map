//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace eve_intel_map.EveIntel {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="EveIntel.IEveIntel", CallbackContract=typeof(eve_intel_map.EveIntel.IEveIntelCallback))]
    public interface IEveIntel {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEveIntel/Connect", ReplyAction="http://tempuri.org/IEveIntel/ConnectResponse")]
        System.Nullable<System.Guid> Connect(long keyId, string vCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEveIntel/Connect", ReplyAction="http://tempuri.org/IEveIntel/ConnectResponse")]
        System.Threading.Tasks.Task<System.Nullable<System.Guid>> ConnectAsync(long keyId, string vCode);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IEveIntel/Disconnect")]
        void Disconnect(System.Guid clientId);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IEveIntel/Disconnect")]
        System.Threading.Tasks.Task DisconnectAsync(System.Guid clientId);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IEveIntelCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IEveIntel/ClientCountUpdate")]
        void ClientCountUpdate(int clientCount);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IEveIntelChannel : eve_intel_map.EveIntel.IEveIntel, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class EveIntelClient : System.ServiceModel.DuplexClientBase<eve_intel_map.EveIntel.IEveIntel>, eve_intel_map.EveIntel.IEveIntel {
        
        public EveIntelClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public EveIntelClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public EveIntelClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public EveIntelClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public EveIntelClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public System.Nullable<System.Guid> Connect(long keyId, string vCode) {
            return base.Channel.Connect(keyId, vCode);
        }
        
        public System.Threading.Tasks.Task<System.Nullable<System.Guid>> ConnectAsync(long keyId, string vCode) {
            return base.Channel.ConnectAsync(keyId, vCode);
        }
        
        public void Disconnect(System.Guid clientId) {
            base.Channel.Disconnect(clientId);
        }
        
        public System.Threading.Tasks.Task DisconnectAsync(System.Guid clientId) {
            return base.Channel.DisconnectAsync(clientId);
        }
    }
}
